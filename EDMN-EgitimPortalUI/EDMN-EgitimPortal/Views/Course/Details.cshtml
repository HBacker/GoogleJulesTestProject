@{
    ViewData["Title"] = "Kurs Detayı";
    Layout = "~/Views/Shared/_Layout.cshtml"; // Genel site layout'unuz
}

<div class="course-detail-page-container container" style="margin-top: 50px; margin-bottom: 50px;">
    <div id="courseContentArea">
        <div class="text-center p-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Yükleniyor...</span>
            </div>
            <p class="mt-3">Kurs detayları yükleniyor...</p>
        </div>
    </div>
</div>

<style>
    /* Genel Stil Ayarlamaları */
    .course-page {
        display: flex;
        flex-wrap: wrap; /* Küçük ekranlarda alt alta geçiş */
        gap: 20px;
        margin-top: 20px;
    }

    .main-content {
        flex: 3; /* Ana içerik (video ve açıklama) daha geniş */
        min-width: 300px; /* Minimum genişlik */
    }

    .course-sidebar {
        flex: 1; /* Sidebar daha dar */
        min-width: 280px; /* Minimum genişlik */
        background-color: #f8f9fa;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        padding: 20px;
    }

    /* Video Bölümü */
    .video-section {
        margin-bottom: 20px;
    }

    .video-container {
        position: relative;
        width: 100%;
        padding-bottom: 56.25%; /* 16:9 Aspect Ratio */
        background-color: #000;
        border-radius: 8px;
        overflow: hidden;
    }

        .video-container video,
        .video-container .no-video-placeholder {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
        }

    .no-video-placeholder {
        display: flex;
        justify-content: center;
        align-items: center;
        background-color: #333;
        color: #fff;
        font-size: 1.2em;
        text-align: center;
    }

    /* Kurs İçeriği */
    .course-content {
        padding: 20px 0;
    }

    .course-title {
        font-size: 2.2em;
        margin-bottom: 10px;
        color: #333;
    }

    .course-description {
        font-size: 1.1em;
        line-height: 1.6;
        color: #555;
    }

    /* Sidebar */
    .sidebar-header {
        margin-bottom: 15px;
        border-bottom: 1px solid #e0e0e0;
        padding-bottom: 10px;
    }

    .sidebar-title {
        font-size: 1.5em;
        color: #333;
    }

    .lessons-list {
        list-style: none;
        padding: 0;
        margin: 0;
    }

    .lesson-item {
        display: flex;
        align-items: center;
        padding: 10px 0;
        border-bottom: 1px solid #eee;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        .lesson-item:hover {
            background-color: #e9ecef;
        }

        .lesson-item.active {
            background-color: #007bff;
            color: #fff;
            border-radius: 5px;
        }

            .lesson-item.active .lesson-title,
            .lesson-item.active .lesson-duration {
                color: #fff;
            }

        .lesson-item:last-child {
            border-bottom: none;
        }

    .lesson-link {
        display: flex;
        width: 100%;
        text-decoration: none;
        color: inherit;
    }

    .lesson-info {
        display: flex;
        align-items: center;
        width: 100%;
    }

    .lesson-thumbnail {
        position: relative;
        width: 80px;
        height: 50px;
        flex-shrink: 0;
        margin-right: 15px;
        border-radius: 5px;
        overflow: hidden;
        background-color: #ddd;
        display: flex;
        justify-content: center;
        align-items: center;
    }

        .lesson-thumbnail img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .lesson-thumbnail .fas.fa-play-circle {
            position: absolute;
            font-size: 2em;
            color: rgba(255, 255, 255, 0.8);
            text-shadow: 0 0 5px rgba(0, 0, 0, 0.5);
        }

    .lesson-details {
        flex-grow: 1;
        display: flex;
        flex-direction: column;
    }

    .lesson-title {
        font-weight: 600;
        font-size: 1em;
        color: #333;
    }

    .lesson-duration {
        font-size: 0.85em;
        color: #777;
    }

    /* Giriş Gerekli Alanı */
    .login-required-area {
        text-align: center;
        padding: 50px;
        background-color: #f0f0f0;
        border-radius: 8px;
        margin-top: 30px;
        font-size: 1.2em;
        color: #666;
    }

    /* Responsive Ayarlamalar */
    @@media (max-width: 768px) {
        .course-page {
            flex-direction: column;
        }

        .main-content, .course-sidebar {
            flex: none;
            width: 100%;
        }
    }
</style>

@section Scripts {
    <script>
        $(document).ready(function () {
            var apiBaseUrl = "@ViewBag.ApiBaseUrl";
            var token = localStorage.getItem("token");
            var courseId = window.location.pathname.split('/').pop(); // URL'den kurs ID'sini al

            let currentLessonId = null; // Şu anda oynatılan dersin ID'si

            // Notyf'ın _Layout.cshtml'de veya notification.js'de başlatıldığı varsayılır.
            if (typeof notyf === 'undefined') {
                var notyf = new Notyf({
                    duration: 3000,
                    position: { x: 'right', y: 'top' }
                });
            }

            // Kurs detaylarını ve dersleri yükle
            function loadCourseDetails() {
                // Yükleniyor mesajını göster
                $('#courseContentArea').html(`
                    <div class="text-center p-5">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Yükleniyor...</span>
                        </div>
                        <p class="mt-3">Kurs detayları yükleniyor...</p>
                    </div>
                `);

                // Kurs detaylarını çek
                $.ajax({
                    url: apiBaseUrl + 'api/courses/' + courseId,
                    type: 'GET',
                    headers: {
                        // "Authorization": "Bearer " + token // Kurs detayları halka açık olabilir
                    },
                    success: function (courseData) {
                        // HTML yapısını oluştur
                        let courseHtml = `
                            <div class="course-page">
                                <div class="main-content">
                                    <div class="video-section">
                                        <div class="video-container">
                                            <video id="courseVideo" class="tarzan-player" controls style="display:none;">
                                                Tarayıcınız video elementini desteklemiyor.
                                            </video>
                                            <div class="no-video-placeholder" id="videoPlaceholder">
                                                <p>Ders seçimi bekleniyor...</p>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="course-content">
                                        <h1 class="course-title">${courseData.title || 'Kurs Başlığı Yok'}</h1>
                                        <p class="course-description">${courseData.description || 'Açıklama yok'}</p>
                                        <div class="course-full-content">
                                            ${courseData.content ? courseData.content.split('\r\n\r\n').map(p => `<p style="font-size:larger; font-weight:400">${p}</p>`).join('') : ''}
                                        </div>
                                    </div>
                                </div>

                                <div class="course-sidebar">
                                    <div class="sidebar-header">
                                        <h2 class="sidebar-title">Kurs İçeriği</h2>
                                    </div>
                                    <div class="lessons-list" id="lessonsList">
                                        </div>
                                </div>
                            </div>
                        `;
                        $('#courseContentArea').html(courseHtml);

                        // Dersleri çek ve listele
                        fetchLessons(courseId);
                    },
                    error: function (xhr, status, error) {
                        var errorMessage = "Kurs detayları yüklenirken bir hata oluştu.";
                        if (xhr.status === 404) {
                            errorMessage = "Kurs bulunamadı.";
                        } else if (xhr.responseJSON && xhr.responseJSON.message) {
                            errorMessage = xhr.responseJSON.message;
                        } else if (xhr.responseText) {
                            errorMessage = xhr.responseText;
                        }
                        notyf.error(errorMessage);
                        $('#courseContentArea').html(`<div class="alert alert-danger">${errorMessage}</div><a href="/" class="btn btn-primary mt-3">Anasayfaya Dön</a>`);
                        console.error("Kurs detayı yükleme hatası:", xhr.responseText);
                    }
                });
            }

            // Dersleri çek ve listeyi doldur
            function fetchLessons(courseId) {
                $.ajax({
                    url: apiBaseUrl + 'api/lessons?courseId=' + courseId, // API'nizin courseId'ye göre filtrelemeyi desteklediği varsayılır
                    type: 'GET',
                    headers: {
                        "Authorization": "Bearer " + token // Dersler için kimlik doğrulama gerekli olabilir
                    },
                    success: function (lessonsData) {
                        var lessonsList = $('#lessonsList');
                        lessonsList.empty();

                        if (lessonsData && lessonsData.length > 0) {
                            // Order lessons by OrderNo
                            lessonsData.sort((a, b) => a.orderNo - b.orderNo);

                            $.each(lessonsData, function (i, lesson) {
                                var thumbnailUrl = lesson.thumbnailUrl && lesson.thumbnailUrl !== '-' ? `/thumbnails/${lesson.thumbnailUrl}` : '/CoursePhotos/thumbnails/defaultCourseCover.png';
                                var videoUrl = lesson.videoUrl ? `/videos/${lesson.videoUrl}` : null; // Video URL'si yoksa null

                                var lessonItem = `
                                    <div class="lesson-item" data-lesson-id="${lesson.id}" data-video-url="${videoUrl || ''}" data-lesson-title="${lesson.title || ''}">
                                        <a href="#" class="lesson-link">
                                            <div class="lesson-info">
                                                <div class="lesson-thumbnail">
                                                    <img src="${thumbnailUrl}" alt="Video Thumbnail">
                                                    <i class="fas fa-play-circle"></i>
                                                </div>
                                                <div class="lesson-details">
                                                    <span class="lesson-title">${lesson.title || 'Ders Başlığı Yok'}</span>
                                                    <span class="lesson-duration"></span> </div>
                                            </div>
                                        </a>
                                    </div>
                                `;
                                lessonsList.append(lessonItem);
                            });

                            // İlk dersi otomatik olarak oynat (eğer varsa)
                            if (lessonsData.length > 0 && token) { // Sadece giriş yapmışsa ve ders varsa
                                playLesson(lessonsData[0].id, lessonsData[0].videoUrl, lessonsData[0].title);
                            } else if (!token) {
                                // Giriş yapmamışsa dersleri gösterme veya video oynatma
                                $('#videoPlaceholder').html('<p class="login-required-area">Dersleri görüntülemek için önce giriş yapmanız gerekiyor!</p>');
                                $('#courseVideo').hide();
                                lessonsList.html('<p class="text-center text-muted mt-3">Dersleri görmek için giriş yapın.</p>');
                            }
                        } else {
                            lessonsList.html('<p class="text-center text-muted mt-3">Bu kursa ait ders bulunmamaktadır.</p>');
                            if (token) {
                                $('#videoPlaceholder').html('<p>Bu kursa ait henüz bir video yüklenmedi!</p>');
                                $('#courseVideo').hide();
                            } else {
                                $('#videoPlaceholder').html('<p class="login-required-area">Dersleri görüntülemek için önce giriş yapmanız gerekiyor!</p>');
                                $('#courseVideo').hide();
                            }
                        }
                    },
                    error: function (xhr, status, error) {
                        var errorMessage = "Dersler yüklenirken bir hata oluştu.";
                        if (xhr.status === 401 || xhr.status === 403) {
                            errorMessage = "Dersleri görmek için giriş yapmanız gerekiyor.";
                            $('#courseContentArea').html(`
                                <div class="text-center p-5">
                                    <p class="login-required-area">${errorMessage}</p>
                                    <a href="/Home/Login" class="btn btn-primary mt-3">Giriş Yap</a>
                                </div>
                            `);
                        } else if (xhr.responseJSON && xhr.responseJSON.message) {
                            errorMessage = xhr.responseJSON.message;
                        } else if (xhr.responseText) {
                            errorMessage = xhr.responseText;
                        }
                        notyf.error(errorMessage);
                        console.error("Ders yükleme hatası:", xhr.responseText);
                    }
                });
            }

            // Ders oynatma ve izlenen içeriği işaretleme
            function playLesson(lessonId, videoUrl, lessonTitle) {
                if (!token) {
                    notyf.error("Dersleri oynatmak için giriş yapmanız gerekiyor.");
                    return;
                }

                if (!videoUrl) {
                    notyf.error("Bu ders için video bulunamadı.");
                    $('#videoPlaceholder').html('<p>Bu ders için video bulunamadı.</p>').show();
                    $('#courseVideo').hide();
                    return;
                }

                const videoPlayer = $('#courseVideo');
                videoPlayer.attr('src', videoUrl).show();
                $('#videoPlaceholder').hide();
                videoPlayer[0].load(); // Video'yu yükle
                videoPlayer[0].play(); // Video'yu oynat

                currentLessonId = lessonId; // Şu an oynatılan dersi ayarla

                // Aktif dersi işaretle
                $('.lesson-item').removeClass('active');
                $(`.lesson-item[data-lesson-id="${lessonId}"]`).addClass('active');

                // Video bittiğinde izlendi olarak işaretle
                videoPlayer.off('ended').on('ended', function() {
                    markLessonAsWatched(lessonId);
                });
            }

            // Dersi izlendi olarak işaretle
            function markLessonAsWatched(lessonId) {
                if (!token) {
                    console.warn("Token yok, ders izlendi olarak işaretlenemedi.");
                    return;
                }

                $.ajax({
                    url: apiBaseUrl + 'api/watched-contents', // WatchedContents API endpoint
                    type: 'POST',
                    headers: {
                        "Authorization": "Bearer " + token,
                        "Content-Type": "application/json"
                    },
                    data: JSON.stringify({ lessonId: lessonId }),
                    success: function (response) {
                        notyf.success("Ders izlendi olarak işaretlendi!");
                        console.log("Ders izlendi:", response);
                        // İsteğe bağlı: UI'da dersin izlendiğini gösteren bir işaret ekle
                    },
                    error: function (xhr, status, error) {
                        console.error("Ders izlendi olarak işaretlenirken hata:", xhr.responseText);
                        // notyf.error("Ders izlendi olarak işaretlenirken bir sorun oluştu.");
                    }
                });
            }

            // Ders listesindeki öğelere tıklama olayı
            $(document).on('click', '.lesson-item', function (e) {
                e.preventDefault();
                const lessonId = $(this).data('lesson-id');
                const videoUrl = $(this).data('video-url');
                const lessonTitle = $(this).data('lesson-title');
                playLesson(lessonId, videoUrl, lessonTitle);
            });

            // Sayfa yüklendiğinde kurs detaylarını yükle
            loadCourseDetails();
        });
    </script>
}
