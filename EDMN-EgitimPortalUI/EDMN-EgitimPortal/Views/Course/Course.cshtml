@{
    ViewData["Title"] = "Kurslar";

    Layout = "~/Views/Shared/_Layout.cshtml"; // Assuming this is your public site's main layout
}

<div class="main-carousel">
    <div class="main-carousel-slide active">
        <img src="/img/slide1.jpg" alt="Slide 1" />
        <div class="main-carousel-text">
            <h1>Learn, Progress, Make a Difference!</h1>
            <p>Skills for today (and your future). Start with us.</p>
        </div>
    </div>
    <div class="main-carousel-slide">
        <img src="/img/slide2.jpg" alt="Slide 2" />
        <div class="main-carousel-text">
            <h1>Write Your Own Story</h1>
            <p>Transform your life with new skills. Your success story begins here.</p>
        </div>
    </div>
    <button class="main-carousel-prev">‹</button>
    <button class="main-carousel-next">›</button>
</div>

<div class="container" style="margin-top: 50px;">
    <h2 style="margin-top: 25px; margin-bottom: 25px;">Kurslar</h2>
    <div class="custom-tab" id="categoryTabs">
        <a href="#" class="tab-link active" data-tab="all">Tümü</a>
    </div>
    <div class="mb-3 mt-3">
        <label for="categorySearchableSelect" class="form-label">Kategoriye Göre Filtrele (Dropdown):</label>
        <select id="categorySearchableSelect" class="form-control">
            <option value="all">Tüm Kategoriler</option>
        </select>
    </div>
    <div class="custom-card-container" id="course-container">
        <div class="alert alert-info" id="noCoursesMessage" style="display:none;">
            Gösterilecek kurs bulunmamaktadır.
        </div>
    </div>
    <div id="paginationControls" class="mt-4 d-flex justify-content-center"></div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            var apiBaseUrl = "@ViewBag.ApiBaseUrl";
            var token = localStorage.getItem("token");
            var defaultImageUrl = '/img/default-course.jpg';
            
            var currentPage = 1;
            var pageSize = 6; 
            var currentCategoryId = 'all';

            if (typeof notyf === 'undefined' && typeof Notyf !== 'undefined') {
                 window.notyf = new Notyf({
                    duration: 3000,
                    position: { x: 'right', y: 'top' }
                });
            } else if (typeof notyf === 'undefined' && typeof Notyf === 'undefined') {
                window.notyf = { 
                    error: function(msg){ console.error("Notyf.error: " + msg); }, 
                    success: function(msg){ console.log("Notyf.success: " + msg); },
                    info: function(msg){ console.log("Notyf.info: " + msg); }
                };
            }

            const slides = document.querySelectorAll('.main-carousel-slide');
            const prevButton = document.querySelector('.main-carousel-prev');
            const nextButton = document.querySelector('.main-carousel-next');
            let currentCarouselSlide = 0;

            function showCarouselSlide(index) {
                slides.forEach((slide, i) => {
                    slide.classList.remove('active');
                    if (i === index) {
                        slide.classList.add('active');
                    }
                });
            }

            if(slides.length > 0 && prevButton && nextButton) {
                prevButton.addEventListener('click', () => {
                    currentCarouselSlide = (currentCarouselSlide === 0) ? slides.length - 1 : currentCarouselSlide - 1;
                    showCarouselSlide(currentCarouselSlide);
                });

                nextButton.addEventListener('click', () => {
                    currentCarouselSlide = (currentCarouselSlide === slides.length - 1) ? 0 : currentCarouselSlide + 1;
                    showCarouselSlide(currentCarouselSlide);
                });

                setInterval(() => {
                    currentCarouselSlide = (currentCarouselSlide === slides.length - 1) ? 0 : currentCarouselSlide + 1;
                    showCarouselSlide(currentCarouselSlide);
                }, 5000); 
            }

            function displayCourses(coursesToDisplay) {
                var courseContainer = $('#course-container');
                courseContainer.empty();
                $('#noCoursesMessage').hide();

                if (!coursesToDisplay || coursesToDisplay.length === 0) {
                    $('#noCoursesMessage').show();
                    return;
                }

                $.each(coursesToDisplay, function (i, course) {
                    var imageUrl = (course.photoUrl === '-' || !course.photoUrl) ? defaultImageUrl : '/uploads/courses/' + course.photoUrl;
                    var categoriesText = course.categories && course.categories.length > 0 ?
                        course.categories.map(c => c.name).join(', ') : 'Genel';
                    var courseTitle = course.title || 'Başlık Yok';
                    var courseDescription = course.description ? course.description.substring(0, 100) + '...' : 'Açıklama Yok';

                    var courseCard = `
                        <div class="custom-card">
                            <div class="custom-card-image">
                                <img src="${imageUrl}" alt="${courseTitle}" />
                            </div>
                            <div class="custom-card-content">
                                <span class="custom-card-category">${categoriesText}</span>
                                <h4>${courseTitle}</h4>
                                <p>${courseDescription}</p>
                                <div class="custom-card-footer">
                                    <a href="/Course/Details/${course.id}" class="btn btn-primary custom-readmore-btn">
                                        Daha Fazla <i class="fas fa-arrow-right"></i>
                                    </a>
                                </div>
                            </div>
                        </div>`;
                    courseContainer.append(courseCard);
                });
            }

            function updatePaginationControls(totalItems, pageNumber) {
                var paginationControls = $('#paginationControls');
                paginationControls.empty();
                var totalPages = Math.ceil(totalItems / pageSize);

                if (totalPages <= 1) return;

                var prevDisabled = pageNumber === 1 ? "disabled" : "";
                var nextDisabled = pageNumber === totalPages ? "disabled" : "";

                paginationControls.append(`<button class="btn btn-outline-secondary page-nav-btn" data-page="${pageNumber - 1}" ${prevDisabled}>Önceki</button>`);

                let startPage = Math.max(1, pageNumber - 2);
                let endPage = Math.min(totalPages, pageNumber + 2);

                if (pageNumber <= 3) {
                    endPage = Math.min(5, totalPages);
                }
                if (pageNumber > totalPages - 3) {
                    startPage = Math.max(1, totalPages - 4);
                }


                if (startPage > 1) {
                    paginationControls.append(`<button class="btn btn-outline-secondary page-btn" data-page="1">1</button>`);
                    if (startPage > 2) {
                        paginationControls.append(`<span class="page-link">...</span>`);
                    }
                }

                for (let i = startPage; i <= endPage; i++) {
                    var activeClass = i === pageNumber ? "active btn-primary" : "btn-outline-secondary";
                    paginationControls.append(`<button class="btn ${activeClass} page-btn" data-page="${i}">${i}</button>`);
                }

                if (endPage < totalPages) {
                    if (endPage < totalPages - 1) {
                        paginationControls.append(`<span class="page-link">...</span>`);
                    }
                    paginationControls.append(`<button class="btn btn-outline-secondary page-btn" data-page="${totalPages}">${totalPages}</button>`);
                }
                
                paginationControls.append(`<button class="btn btn-outline-secondary page-nav-btn" data-page="${pageNumber + 1}" ${nextDisabled}>Sonraki</button>`);

                $('.page-btn, .page-nav-btn').on('click', function() {
                    var targetPage = $(this).data('page');
                    if (targetPage > 0 && targetPage <= totalPages) {
                         loadCourses(currentCategoryId, targetPage);
                    }
                });
            }
            
            function loadCourses(categoryId, pageNumber) {
                currentCategoryId = categoryId;
                currentPage = pageNumber;
                
                let url = apiBaseUrl + '/courses?pageNumber=' + currentPage + '&pageSize=' + pageSize;
                if (currentCategoryId && currentCategoryId !== 'all') {
                    url += '&categoryId=' + currentCategoryId;
                }
                
                $('#course-container').empty().html('<div class="text-center p-5"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Yükleniyor...</span></div></div>');
                $('#paginationControls').empty();


                $.ajax({
                    url: url,
                    type: 'GET',
                    headers: {}, 
                    success: function (response) {
                        if (response && response.items) {
                            displayCourses(response.items);
                            updatePaginationControls(response.totalCount, currentPage);
                        } else {
                            displayCourses([]);
                            updatePaginationControls(0,1);
                            notyf.error("Kurs formatı hatalı.");
                        }
                    },
                    error: function (xhr, status, error) {
                        notyf.error("Kurslar yüklenirken bir sorun oluştu.");
                        displayCourses([]);
                        updatePaginationControls(0,1);
                    }
                });
            }

            function loadCategoriesAndFilters() {
                $.ajax({
                    url: apiBaseUrl + '/categories',
                    type: 'GET',
                    headers: {},
                    success: function (categories) {
                        var categoryTabs = $('#categoryTabs');
                        var categorySelect = $('#categorySearchableSelect');
                        
                        categoryTabs.find('.tab-link:not([data-tab="all"])').remove();
                        categorySelect.find('option:not([value="all"])').remove();

                        $.each(categories, function (i, category) {
                            var tabLink = `<a href="#" class="tab-link" data-tab="${category.id}">${category.name}</a>`;
                            categoryTabs.append(tabLink);
                            categorySelect.append($('<option>', { value: category.id, text: category.name }));
                        });

                        categoryTabs.off('click', '.tab-link').on('click', '.tab-link', function (e) {
                            e.preventDefault();
                            var selectedCategoryId = $(this).data('tab');
                            $('.tab-link').removeClass('active');
                            $(this).addClass('active');
                            $('#categorySearchableSelect').val(selectedCategoryId); 
                            loadCourses(selectedCategoryId, 1);
                        });
                        
                        categorySelect.off('change').on('change', function() {
                            var selectedCategoryId = $(this).val();
                            $('.tab-link').removeClass('active');
                            $(`.tab-link[data-tab="${selectedCategoryId}"]`).addClass('active');
                            loadCourses(selectedCategoryId, 1);
                        });
                    },
                    error: function (xhr, status, error) {
                        notyf.error("Kategoriler yüklenirken bir sorun oluştu.");
                    }
                });
                
                loadCourses(currentCategoryId, currentPage);
            }
            
            loadCategoriesAndFilters();
        });
    </script>
}
