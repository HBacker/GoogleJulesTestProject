@{
    ViewData["Title"] = "Ders Düzenle";
    Layout = "_layoutAdminLTE";
}

<div class="content-header" style="margin-left:270px">
    <div class="container-fluid">
        <div class="row mb-2">
            <div class="col-sm-6">
                <h1 class="m-0">Dersleri Düzenle (<span id="courseTitle">Yükleniyor...</span>)</h1>
            </div>
        </div>
    </div>
</div>

<section class="content" style="margin-left:270px">
    <div class="container-fluid">
        <div class="row justify-content-center">
            <div class="col-md-8">
                <div class="card card-primary">
                    <div class="card-header">
                        <h3 class="card-title">Ders Bilgileri</h3>
                    </div>
                    <form id="editLessonsForm">
                        <input type="hidden" id="courseId" value="@ViewBag.CourseId" />
                        <div class="card-body">
                            <div id="validationSummary" class="alert alert-danger" style="display:none;"></div>
                            <div id="lessonFields">
                            </div>
                        </div>
                        <div class="card-footer">
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-save me-2"></i> Değişiklikleri Kaydet
                            </button>
                            <a href="/Admin/LessonList?courseId=@ViewBag.CourseId" class="btn btn-secondary">Geri Dön</a>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</section>

<style>
    .lesson-card {
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        margin-bottom: 20px;
        background-color: white;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .lesson-header {
        padding: 15px 20px;
        border-bottom: 1px solid #e0e0e0;
        display: flex;
        justify-content: space-between;
        align-items: center;
        background-color: #f8f9fa;
        border-top-left-radius: 8px;
        border-top-right-radius: 8px;
    }

    .lesson-number {
        font-weight: 600;
        color: #333;
        font-size: 1.1em;
    }

    .lesson-body {
        padding: 20px;
    }
</style>

@section Scripts {
    <script>
        var apiBaseUrl = "@ViewBag.ApiBaseUrl";
        var token = localStorage.getItem("token");
        var courseId = "@ViewBag.CourseId";

        function uploadLessonFile(file, uploadUrl) {
            var deferred = $.Deferred();
            if (!file) {
                deferred.resolve(null);
                return deferred.promise();
            }

            var formData = new FormData();
            if (uploadUrl.includes('UploadLessonVideo')) {
                formData.append('videoFile', file);
            } else if (uploadUrl.includes('UploadLessonThumbnail')) {
                formData.append('thumbnailFile', file);
            } else {
                deferred.reject({ message: "Bilinmeyen dosya yükleme türü." });
                return deferred.promise();
            }
            
            $.ajax({
                url: uploadUrl,
                type: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function (response) {
                    if (response && response.fileName) {
                        deferred.resolve(response); 
                    } else {
                        deferred.reject({ message: "Dosya adı sunucudan alınamadı." });
                    }
                },
                error: function (xhr, status, error) {
                    var errorMessage = "Dosya yüklenirken bir hata oluştu.";
                    if (xhr.responseJSON && xhr.responseJSON.message) {
                        errorMessage = xhr.responseJSON.message;
                    } else if (xhr.responseText) {
                        try {
                            var parsedError = JSON.parse(xhr.responseText);
                            if(parsedError && parsedError.message) errorMessage = parsedError.message;
                        } catch(e) { }
                    }
                    deferred.reject({ message: errorMessage, details: xhr.responseText });
                }
            });
            return deferred.promise();
        }

        if (!token) {
            notyf.error("Giriş yapmanız gerekiyor.");
            location.href = "/Home/Login";
        }

        function displayValidationErrors(errors) {
            var summary = $('#validationSummary');
            summary.empty().show();
            if (Array.isArray(errors)) {
                $.each(errors, function (i, error) {
                    summary.append('<p>' + error + '</p>');
                });
            } else if (typeof errors === 'string') {
                summary.append('<p>' + errors + '</p>');
            } else {
                summary.append('<p>Formda hata(lar) var. Lütfen kontrol edin.</p>');
            }
            summary.addClass('alert-danger');
        }

        function clearValidationErrors() {
            $('#validationSummary').empty().hide().removeClass('alert-danger');
            $('.form-control').removeClass('is-invalid');
            $('.invalid-feedback').text('');
        }

        function showFieldValidationError(element, message) {
            $(element).addClass('is-invalid');
            $(element).next('.invalid-feedback').text(message).show();
        }

        function fetchLessonsForEdit(courseId) {
            $.ajax({
                url: apiBaseUrl + '/lessons?courseId=' + courseId, 
                type: 'GET',
                headers: { "Authorization": "Bearer " + token },
                success: function (data) {
                    var lessonFieldsContainer = $('#lessonFields');
                    lessonFieldsContainer.empty();

                    if (data && data.length > 0) {
                        $('#courseTitle').text(data[0].courseTitle || 'Kurs'); 
                        $.each(data, function (index, lesson) {
                            const lessonDiv = $(`
                                        <div class="lesson-card" id="lesson-card-${lesson.id}">
                                            <div class="lesson-header">
                                                <span class="lesson-number">Ders ${lesson.orderNo}</span>
                                                <button type="button" class="btn btn-outline-danger btn-sm remove-lesson-btn" data-id="${lesson.id}">
                                                    <i class="fas fa-times"></i>
                                                </button>
                                            </div>
                                            <div class="lesson-body">
                                                <div class="row g-4">
                                                    <div class="col-12">
                                                        <div class="form-group">
                                                            <label class="form-label">Ders Adı</label>
                                                            <input type="text"
                                                                   class="form-control lesson-title"
                                                                   placeholder="Ders adını girin"
                                                                   value="${lesson.title || ''}"
                                                                   required />
                                                            <div class="invalid-feedback"></div>
                                                        </div>
                                                    </div>
                                                    <div class="col-md-6">
                                                        <div class="form-group">
                                                            <label class="form-label">Video Dosyası</label>
                                                            <div class="input-group">
                                                                <input type="file"
                                                                       class="form-control lesson-video-file"
                                                                       accept="video/*" />
                                                            </div>
                                                            <small class="text-muted">Mevcut video: ${lesson.videoUrl || 'Yok'}</small>
                                                            <div class="invalid-feedback"></div>
                                                        </div>
                                                    </div>
                                                    <div class="col-md-6">
                                                        <div class="form-group">
                                                            <label class="form-label">Thumbnail Dosyası</label>
                                                            <div class="input-group">
                                                                <input type="file"
                                                                       class="form-control lesson-thumbnail-file"
                                                                       accept="image/*" />
                                                            </div>
                                                            <small class="text-muted">Mevcut thumbnail: ${lesson.thumbnailUrl || 'Yok'}</small>
                                                            ${lesson.thumbnailUrl ? `<img src="/uploads/lessons/thumbs/${lesson.thumbnailUrl}" alt="Thumbnail" style="max-width: 100px; height: auto; margin-top: 5px;" class="img-thumbnail" />` : ''}
                                                            <div class="invalid-feedback"></div>
                                                        </div>
                                                    </div>
                                                    <input type="hidden" class="lesson-id" value="${lesson.id}" />
                                                    <input type="hidden" class="lesson-order-no" value="${lesson.orderNo}" />
                                                    <input type="hidden" class="lesson-course-id" value="${lesson.courseId}" />
                                                    <input type="hidden" class="lesson-existing-video-url" value="${lesson.videoUrl || ''}" />
                                                    <input type="hidden" class="lesson-existing-thumbnail-url" value="${lesson.thumbnailUrl || ''}" />
                                                    <input type="hidden" class="lesson-existing-educator-id" value="${lesson.educatorId || ''}" />
                                                </div>
                                            </div>
                                        </div>
                                    `);
                            lessonFieldsContainer.append(lessonDiv);
                        });

                        $('.remove-lesson-btn').on('click', function () {
                            const lessonIdToRemove = $(this).data('id');
                            removeLessonFromEdit(lessonIdToRemove);
                        });

                    } else {
                        notyf.info("Bu kursa ait ders bulunamadı.");
                        $('#courseTitle').text('Kurs');
                    }
                },
                error: function (xhr, status, error) {
                    notyf.error("Dersler yüklenirken bir sorun oluştu.");
                    
                    window.location.href = '/Admin/LessonList';
                }
            });
        }

        $(document).ready(function () {
            if (courseId) {
                fetchLessonsForEdit(courseId);
            } else {
                notyf.error("Düzenlenecek kurs ID'si bulunamadı.");
                window.location.href = '/Admin/LessonList';
            }

            $('#editLessonsForm').on('submit', function (e) {
                e.preventDefault();
                clearValidationErrors();

                const $submitButton = $(this).find('button[type="submit"]');
                $submitButton.prop('disabled', true).html('<i class="fas fa-spinner fa-spin me-2"></i> Kaydediliyor...');

                let lessonProcessingPromises = [];
                let allFormsValidOverall = true;

                $('#lessonFields .lesson-card').each(function () {
                    const $lessonCard = $(this);
                    const lessonId = $lessonCard.find('.lesson-id').val();
                    const lessonTitleInput = $lessonCard.find('.lesson-title');
                    const videoFileInput = $lessonCard.find('.lesson-video-file');
                    const thumbnailFileInput = $lessonCard.find('.lesson-thumbnail-file');
                    const orderNo = $lessonCard.find('.lesson-order-no').val();
                    const existingVideoUrl = $lessonCard.find('.lesson-existing-video-url').val();
                    const existingThumbnailUrl = $lessonCard.find('.lesson-existing-thumbnail-url').val();
                    const existingEducatorId = $lessonCard.find('.lesson-existing-educator-id').val(); 
                    const currentCourseId = $lessonCard.find('.lesson-course-id').val();


                    const lessonTitle = lessonTitleInput.val().trim();
                    const newVideoFile = videoFileInput[0].files[0];
                    const newThumbnailFile = thumbnailFileInput[0].files[0];

                    clearFieldValidationError(lessonTitleInput);
                    clearFieldValidationError(videoFileInput);
                    clearFieldValidationError(thumbnailFileInput);

                    let currentLessonFormValid = true;
                    if (!lessonTitle) {
                        showFieldValidationError(lessonTitleInput, 'Ders adı boş bırakılamaz.');
                        currentLessonFormValid = false;
                    }
                    if (newVideoFile && newVideoFile.size > 2 * 1024 * 1024 * 1024) { 
                        showFieldValidationError(videoFileInput, 'Video dosyası çok büyük (max: 2GB).');
                        currentLessonFormValid = false;
                    }
                    if (newThumbnailFile && newThumbnailFile.size > 5 * 1024 * 1024) { 
                        showFieldValidationError(thumbnailFileInput, 'Thumbnail dosyası çok büyük (max: 5MB).');
                        currentLessonFormValid = false;
                    }

                    if (!currentLessonFormValid) {
                        allFormsValidOverall = false;
                        return; 
                    }

                    var lessonDeferred = $.Deferred();
                    lessonProcessingPromises.push(lessonDeferred.promise());

                    var videoUrlPromise = newVideoFile ? uploadLessonFile(newVideoFile, '/Admin/UploadLessonVideo') : $.Deferred().resolve(null).promise();
                    var thumbnailUrlPromise = newThumbnailFile ? uploadLessonFile(newThumbnailFile, '/Admin/UploadLessonThumbnail') : $.Deferred().resolve(null).promise();
                    
                    $.when(videoUrlPromise, thumbnailUrlPromise)
                        .done(function (videoUploadResponse, thumbnailUploadResponse) {
                            const finalVideoUrl = videoUploadResponse && videoUploadResponse.fileName ? videoUploadResponse.fileName : existingVideoUrl;
                            const finalThumbnailUrl = thumbnailUploadResponse && thumbnailUploadResponse.fileName ? thumbnailUploadResponse.fileName : existingThumbnailUrl;

                            const lessonPayload = {
                                id: parseInt(lessonId),
                                courseId: parseInt(currentCourseId),
                                title: lessonTitle,
                                orderNo: parseInt(orderNo),
                                videoUrl: finalVideoUrl || null,
                                thumbnailUrl: finalThumbnailUrl || null,
                                educatorId: existingEducatorId || null 
                            };

                            $.ajax({
                                url: apiBaseUrl + '/lessons/' + lessonId,
                                type: 'PUT',
                                headers: {
                                    "Authorization": "Bearer " + token,
                                    "Content-Type": "application/json"
                                },
                                data: JSON.stringify(lessonPayload),
                                success: function (response) {
                                    lessonDeferred.resolve(response);
                                },
                                error: function (xhr, status, error) {
                                    var errorMsg = `Ders "${lessonTitle}" güncellenirken hata: `;
                                    if (xhr.responseJSON && xhr.responseJSON.message) errorMsg += xhr.responseJSON.message;
                                    else errorMsg += (xhr.statusText || error);
                                    notyf.error(errorMsg);
                                    lessonDeferred.reject({ lessonTitle: lessonTitle, error: xhr.responseText });
                                }
                            });
                        })
                        .fail(function (uploadError) {
                            var errorMsg = `Ders "${lessonTitle}" için dosya yükleme hatası: `;
                            if (uploadError && uploadError.message) errorMsg += uploadError.message;
                            else errorMsg += "Bilinmeyen dosya yükleme hatası.";
                            notyf.error(errorMsg);
                            lessonDeferred.reject({ lessonTitle: lessonTitle, error: uploadError });
                        });
                }); 

                if (!allFormsValidOverall) {
                    notyf.error("Lütfen tüm ders formlarındaki işaretli hataları düzeltin.");
                    $submitButton.prop('disabled', false).html('<i class="fas fa-save me-2"></i> Değişiklikleri Kaydet');
                    return;
                }

                if (lessonProcessingPromises.length === 0 && allFormsValidOverall) {
                    notyf.info('Güncellenecek veya işlenecek ders bulunmamaktadır.');
                     $submitButton.prop('disabled', false).html('<i class="fas fa-save me-2"></i> Değişiklikleri Kaydet');
                    return;
                }

                $.when.apply($, lessonProcessingPromises)
                    .done(function () {
                        notyf.success("Tüm dersler başarıyla güncellendi!");
                        setTimeout(function() {
                             window.location.href = '/Admin/LessonList?courseId=' + courseId;
                        }, 1500);
                    })
                    .fail(function () {
                        notyf.error("Bazı dersler güncellenirken hatalar oluştu.");
                    })
                    .always(function () {
                        $submitButton.prop('disabled', false).html('<i class="fas fa-save me-2"></i> Değişiklikleri Kaydet');
                    });
            });
        });
        
        window.removeLessonFromEdit = function (lessonId) {
            Swal.fire({
                title: 'Emin misiniz?',
                text: "Bu dersi silmek istediğinizden emin misiniz? Bu işlem geri alınamaz!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Evet, Sil!',
                cancelButtonText: 'İptal'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: apiBaseUrl + '/lessons/' + lessonId,
                        type: 'DELETE',
                        headers: { "Authorization": "Bearer " + token },
                        success: function (response) {
                            notyf.success("Ders başarıyla silindi.");
                            $(`#lesson-card-${lessonId}`).remove(); 
                            
                            if ($('.lesson-card').length === 0) {
                                notyf.info('Bu kursa ait tüm dersler silindi.');
                            }
                        },
                        error: function (xhr, status, error) {
                            var errorMessage = "Ders silinirken bir hata oluştu.";
                            if (xhr.responseJSON && xhr.responseJSON.message) {
                                errorMessage = xhr.responseJSON.message;
                            } else if (xhr.responseText) {
                                errorMessage = xhr.responseText;
                            }
                            notyf.error(errorMessage);
                            
                        }
                    });
                }
            });
        };
    </script>
}
