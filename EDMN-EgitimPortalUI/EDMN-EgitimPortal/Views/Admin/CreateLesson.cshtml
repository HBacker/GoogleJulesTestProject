@{
    ViewData["Title"] = "Ders Oluştur";
    Layout = "_layoutAdminLTE";
}

<div class="content-header" style="margin-left:270px">
    <div class="container-fluid">
        <div class="row mb-2">
            <div class="col-sm-6">
                <h1 class="m-0">Yeni Ders Oluştur</h1>
            </div>
        </div>
    </div>
</div>

<section class="content" style="margin-left:270px">
    <div class="container-fluid">
        <div class="row justify-content-center">
            <div class="col-md-8">
                <div class="card card-primary">
                    <div class="card-header">
                        <h3 class="card-title">Ders Bilgileri</h3>
                    </div>
                    <div class="card-body">
                        <div class="form-group">
                            <label for="courseSelect">Kurs Seçiniz</label>
                            <select id="courseSelect" class="form-control form-control-lg" required>
                                <option value="">Lütfen bir kurs seçin</option>
                            </select>
                            <div class="invalid-feedback">Lütfen bir kurs seçin.</div>
                        </div>

                        <div id="lessonFormsContainer">
                        </div>

                        <button type="button" class="btn btn-dark mt-3" id="addLessonBtn">
                            <i class="fas fa-plus me-2"></i> Ders Ekle
                        </button>
                    </div>
                    <div class="card-footer">
                        <button type="button" class="btn btn-primary" id="saveAllLessonsBtn">
                            <i class="fas fa-save me-2"></i> Tüm Dersleri Kaydet
                        </button>
                        <a href="/Admin/LessonList" class="btn btn-secondary">Geri Dön</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<style>
    .lesson-card {
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        margin-bottom: 20px;
        background-color: white;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .lesson-header {
        padding: 15px 20px;
        border-bottom: 1px solid #e0e0e0;
        display: flex;
        justify-content: space-between;
        align-items: center;
        background-color: #f8f9fa;
        border-top-left-radius: 8px;
        border-top-right-radius: 8px;
    }

    .lesson-number {
        font-weight: 600;
        color: #333;
        font-size: 1.1em;
    }

    .lesson-body {
        padding: 20px;
    }
</style>

@section Scripts {
    <script>
        let lessonCounter = 0; // Tracks total lessons added (even if removed)
        let activeLessonIndexes = []; // Tracks currently displayed lesson form indexes
        var apiBaseUrl = "@ViewBag.ApiBaseUrl";
        var token = localStorage.getItem("token");

        if (!token) {
            notyf.error("Giriş yapmanız gerekiyor.");
            location.href = "/Home/Login";
            return;
        }

        function displayFieldValidationError(element, message) {
            $(element).addClass('is-invalid');
            $(element).next('.invalid-feedback').text(message).show();
        }

        function clearFieldValidationError(element) {
            $(element).removeClass('is-invalid');
            $(element).next('.invalid-feedback').text('').hide();
        }

        function getCoursesForDropdown() {
            $.ajax({
                url: apiBaseUrl + '/courses',
                type: 'GET',
                headers: { "Authorization": "Bearer " + token },
                success: function (data) {
                    var courseSelect = $("#courseSelect");
                    courseSelect.empty();
                    courseSelect.append($('<option>', { value: '', text: 'Lütfen bir kurs seçin' }));
                    $.each(data, function (i, item) {
                        courseSelect.append($('<option>', {
                            value: item.id,
                            text: item.title
                        }));
                    });
                },
                error: function (xhr, status, error) {
                    console.error("Kurslar yüklenirken hata oluştu:", xhr.responseText);
                    notyf.error("Kurslar yüklenirken bir sorun oluştu.");
                }
            });
        }

        $(document).ready(function () {
            getCoursesForDropdown();

            $('#courseSelect').on('change', function () {
                // Clear existing lesson forms when course changes
                $('#lessonFormsContainer').empty();
                activeLessonIndexes = [];
                lessonCounter = 0;
                clearFieldValidationError(this);
            });

            $('#addLessonBtn').on('click', function () {
                const courseId = $('#courseSelect').val();
                if (!courseId) {
                    displayFieldValidationError($('#courseSelect'), 'Lütfen ders eklemeden önce bir kurs seçin.');
                    notyf.error('Lütfen ders eklemeden önce bir kurs seçin!');
                    return;
                }
                addNewLessonForm();
            });

            $('#saveAllLessonsBtn').on('click', function () {
                saveAllLessons();
            });
        });

        function addNewLessonForm() {
            const currentLessonIndex = lessonCounter++; // Assign unique index and increment counter
            activeLessonIndexes.push(currentLessonIndex); // Add to active indexes

            const container = $('#lessonFormsContainer');
            const lessonDiv = $(`
                        <div class="lesson-card" id="lesson-card-${currentLessonIndex}">
                            <div class="lesson-header">
                                <span class="lesson-number">Ders ${activeLessonIndexes.indexOf(currentLessonIndex) + 1}</span>
                                <button type="button" class="btn btn-outline-danger btn-sm remove-lesson-btn" data-index="${currentLessonIndex}">
                                    <i class="fas fa-times"></i>
                                </button>
                            </div>
                            <div class="lesson-body">
                                <div class="row g-4">
                                    <div class="col-12">
                                        <div class="form-group">
                                            <label class="form-label">Ders Adı</label>
                                            <input type="text"
                                                   class="form-control lesson-title"
                                                   placeholder="Ders adını girin"
                                                   data-lesson-index="${currentLessonIndex}"
                                                   required />
                                            <div class="invalid-feedback"></div>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            <label class="form-label">Video Dosyası</label>
                                            <div class="input-group">
                                                <input type="file"
                                                       class="form-control lesson-video-file"
                                                       accept="video/*"
                                                       data-lesson-index="${currentLessonIndex}" />
                                            </div>
                                            <small class="text-muted">Desteklenen formatlar: MP4, WebM, OGG (Max 2GB)</small>
                                            <div class="invalid-feedback"></div>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            <label class="form-label">Thumbnail Dosyası</label>
                                            <div class="input-group">
                                                <input type="file"
                                                       class="form-control lesson-thumbnail-file"
                                                       accept="image/*"
                                                       data-lesson-index="${currentLessonIndex}" />
                                            </div>
                                            <small class="text-muted">Desteklenen formatlar: JPG, PNG, WebP (Max 5MB)</small>
                                            <div class="invalid-feedback"></div>
                                        </div>
                                    </div>
                                    <input type="hidden" class="lesson-order-no" value="${activeLessonIndexes.indexOf(currentLessonIndex) + 1}" data-lesson-index="${currentLessonIndex}" />
                                </div>
                            </div>
                        </div>
                    `);
            container.append(lessonDiv);

            // Attach event listener for the new remove button
            lessonDiv.find('.remove-lesson-btn').on('click', function () {
                const indexToRemove = $(this).data('index');
                removeLessonForm(indexToRemove);
            });

            updateLessonOrderNumbers();
        }

        function removeLessonForm(indexToRemove) {
            $(`#lesson-card-${indexToRemove}`).remove();
            activeLessonIndexes = activeLessonIndexes.filter(idx => idx !== indexToRemove); // Remove from active list
            updateLessonOrderNumbers(); // Re-index remaining forms
            notyf.info(`Ders ${activeLessonIndexes.indexOf(indexToRemove) + 1} formdan kaldırıldı.`);
        }

        function updateLessonOrderNumbers() {
            $('.lesson-card').each(function (i) {
                const card = $(this);
                const originalIndex = card.find('.remove-lesson-btn').data('index'); // Get the original unique index
                card.find('.lesson-number').text(`Ders ${i + 1}`);
                card.find('.lesson-order-no').val(i + 1); // Update hidden order number
            });
        }

        function uploadLessonFile(file, uploadUrl) {
            var deferred = $.Deferred();
            if (!file) {
                // If no file, resolve immediately with null, indicating no upload was attempted or needed.
                deferred.resolve(null);
                return deferred.promise();
            }

            var formData = new FormData();
            // The controller expects the parameter name to be 'videoFile' or 'thumbnailFile'
            if (uploadUrl.includes('UploadLessonVideo')) {
                formData.append('videoFile', file);
            } else if (uploadUrl.includes('UploadLessonThumbnail')) {
                formData.append('thumbnailFile', file);
            } else {
                // Should not happen if called correctly
                console.error("Unknown upload URL for file: " + uploadUrl);
                deferred.reject({ message: "Bilinmeyen dosya yükleme türü." });
                return deferred.promise();
            }
            

            $.ajax({
                url: uploadUrl, // This will be /Admin/UploadLessonVideo or /Admin/UploadLessonThumbnail
                type: 'POST',
                headers: {
                    // "Authorization": "Bearer " + token // Not needed for MVC controller actions if using cookies/anti-forgery
                },
                data: formData,
                processData: false,
                contentType: false,
                success: function (response) {
                    // Assuming response is { fileName: "actual_filename.ext" }
                    if (response && response.fileName) {
                        deferred.resolve(response); 
                    } else {
                        // If filename is not in response, treat as error
                        deferred.reject({ message: "Dosya adı sunucudan alınamadı." });
                    }
                },
                error: function (xhr, status, error) {
                    var errorMessage = "Dosya yüklenirken bir hata oluştu.";
                    if (xhr.responseJSON && xhr.responseJSON.message) {
                        errorMessage = xhr.responseJSON.message;
                    } else if (xhr.responseText) {
                        try {
                            var parsedError = JSON.parse(xhr.responseText);
                            if(parsedError && parsedError.message) errorMessage = parsedError.message;
                        } catch(e) { /* use raw responseText */ }
                    }
                    console.error("Dosya yükleme hatası (" + uploadUrl + "):", errorMessage, xhr.responseText);
                    deferred.reject({ message: errorMessage, details: xhr.responseText });
                }
            });
            return deferred.promise();
        }

        function saveAllLessons() {
            const courseId = $('#courseSelect').val();
            if (!courseId) {
                displayFieldValidationError($('#courseSelect'), 'Lütfen dersleri kaydetmeden önce bir kurs seçin.');
                notyf.error('Lütfen dersleri kaydetmeden önce bir kurs seçin.');
                return;
            }
            clearFieldValidationError($('#courseSelect'));

            const $saveAllLessonsBtn = $('#saveAllLessonsBtn');
            $saveAllLessonsBtn.prop('disabled', true).html('<i class="fas fa-spinner fa-spin me-2"></i> Kaydediliyor...');

            let lessonPromises = [];
            let allFormsValid = true;

            $('#lessonFormsContainer .lesson-card').each(function (index) {
                const $lessonCard = $(this);
                const lessonTitleInput = $lessonCard.find('.lesson-title');
                const videoFileInput = $lessonCard.find('.lesson-video-file');
                const thumbnailFileInput = $lessonCard.find('.lesson-thumbnail-file');
                const orderNoInput = $lessonCard.find('.lesson-order-no');

                const lessonTitle = lessonTitleInput.val().trim();
                const videoFile = videoFileInput[0].files[0]; // File object or undefined
                const thumbnailFile = thumbnailFileInput[0].files[0]; // File object or undefined
                const orderNo = parseInt(orderNoInput.val());

                clearFieldValidationError(lessonTitleInput);
                clearFieldValidationError(videoFileInput);
                clearFieldValidationError(thumbnailFileInput);

                let currentLessonValid = true;
                if (!lessonTitle) {
                    displayFieldValidationError(lessonTitleInput, 'Ders adı boş bırakılamaz.');
                    currentLessonValid = false;
                }
                if (videoFile && videoFile.size > 2 * 1024 * 1024 * 1024) { // 2GB
                    displayFieldValidationError(videoFileInput, 'Video dosyası çok büyük (max: 2GB).');
                    currentLessonValid = false;
                }
                if (thumbnailFile && thumbnailFile.size > 5 * 1024 * 1024) { // 5MB
                    displayFieldValidationError(thumbnailFileInput, 'Thumbnail dosyası çok büyük (max: 5MB).');
                    currentLessonValid = false;
                }

                if (!currentLessonValid) {
                    allFormsValid = false;
                    // Skip adding promise for this lesson, or add a rejected promise
                    // For simplicity, we'll rely on allFormsValid flag checked later.
                    return; // Continues to next .each iteration
                }

                // Create a deferred object for the entire lesson processing chain
                var lessonProcessingDeferred = $.Deferred();
                lessonPromises.push(lessonProcessingDeferred.promise());

                var videoUploadPromise = uploadLessonFile(videoFile, '/Admin/UploadLessonVideo');
                var thumbnailUploadPromise = uploadLessonFile(thumbnailFile, '/Admin/UploadLessonThumbnail');

                $.when(videoUploadPromise, thumbnailUploadPromise)
                    .done(function (videoUploadResponse, thumbnailUploadResponse) {
                        // videoUploadResponse and thumbnailUploadResponse are arrays: [data, statusText, jqXHR]
                        // or null if no file was provided and uploadLessonFile resolved with null
                        const videoFileName = videoUploadResponse && videoUploadResponse[0] ? videoUploadResponse[0].fileName : null;
                        const thumbnailFileName = thumbnailUploadResponse && thumbnailUploadResponse[0] ? thumbnailUploadResponse[0].fileName : null;

                        const lessonPayload = {
                            courseId: parseInt(courseId),
                            title: lessonTitle,
                            orderNo: orderNo,
                            videoUrl: videoFileName, // API expects just the filename
                            thumbnailUrl: thumbnailFileName // API expects just the filename
                        };

                        $.ajax({
                            url: apiBaseUrl + '/lessons',
                            type: 'POST',
                            headers: {
                                "Authorization": "Bearer " + token,
                                "Content-Type": "application/json"
                            },
                            data: JSON.stringify(lessonPayload),
                            success: function (response) {
                                console.log(`Ders "${lessonTitle}" başarıyla API'ye gönderildi.`);
                                lessonProcessingDeferred.resolve(response); // Resolve the main promise for this lesson
                            },
                            error: function (xhr, status, error) {
                                var errorMsg = `Ders "${lessonTitle}" API'ye gönderilirken hata: `;
                                if (xhr.responseJSON && xhr.responseJSON.message) errorMsg += xhr.responseJSON.message;
                                else errorMsg += xhr.statusText;
                                console.error(errorMsg, xhr.responseText);
                                notyf.error(errorMsg); // Notify for specific lesson failure
                                lessonProcessingDeferred.reject({lessonTitle: lessonTitle, error: xhr.responseText});
                            }
                        });
                    })
                    .fail(function (uploadError) {
                        // This .fail is for $.when if either uploadLessonFile promise is rejected.
                        var errorMsg = `Ders "${lessonTitle}" için dosya yükleme hatası: `;
                        if(uploadError && uploadError.message) errorMsg += uploadError.message;
                        else errorMsg += "Bilinmeyen dosya yükleme hatası.";
                        console.error(errorMsg, uploadError);
                        notyf.error(errorMsg);
                        lessonProcessingDeferred.reject({lessonTitle: lessonTitle, error: uploadError});
                    });
            }); // End of .each lesson-card

            if (!allFormsValid) {
                notyf.error("Lütfen tüm ders formlarındaki işaretli hataları düzeltin.");
                $saveAllLessonsBtn.prop('disabled', false).html('<i class="fas fa-save me-2"></i> Tüm Dersleri Kaydet');
                return;
            }

            if (lessonPromises.length === 0 && allFormsValid) { // No lessons added, but no validation errors on empty form
                notyf.info('Kaydedilecek ders bulunmamaktadır.');
                $saveAllLessonsBtn.prop('disabled', false).html('<i class="fas fa-save me-2"></i> Tüm Dersleri Kaydet');
                return;
            }
            
            $.when.apply($, lessonPromises)
                .done(function () {
                    notyf.success("Tüm dersler başarıyla oluşturuldu!");
                     setTimeout(function() { // Give time for notyf to show
                        window.location.href = '/Admin/LessonList?courseId=' + courseId;
                    }, 1500);
                })
                .fail(function (failedLessonError) {
                    // This fail callback might receive arguments from the first rejected promise.
                    // More specific error handling for which lesson failed was done via notyf inside the loop.
                    notyf.error("Bazı dersler oluşturulurken hatalar oluştu. Lütfen detayları kontrol edin.");
                    console.error("Bir veya daha fazla ders işlenirken hata:", failedLessonError);
                })
                .always(function () {
                    $saveAllLessonsBtn.prop('disabled', false).html('<i class="fas fa-save me-2"></i> Tüm Dersleri Kaydet');
                });
        }
    </script>
}
