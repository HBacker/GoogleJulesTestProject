@{
    ViewData["Title"] = "Kurs Düzenle";

    Layout = "_layoutAdminLTE";
}

<div class="content-header" style="margin-left:270px;">
    <div class="container-fluid">
        <div class="row mb-2">
            <div class="col-sm-6">
                <h1 class="m-0">Kurs Düzenle</h1>
            </div>
        </div>
    </div>
</div>

<section class="content" style="margin-left:270px;">
    <div class="container-fluid">
        <div class="row justify-content-center">
            <div class="col-md-8">
                <div class="card card-primary">
                    <div class="card-header">
                        <h3 class="card-title">Kurs Bilgileri</h3>
                    </div>
                    <form id="editCourseForm" enctype="multipart/form-data">
                        <input type="hidden" id="courseId" value="@ViewBag.CourseId" />
                        <div class="card-body">
                            <div id="validationSummary" class="alert alert-danger" style="display:none;"></div>

                            <div class="form-group">
                                <label for="title">Başlık</label>
                                <input type="text" class="form-control" id="title" placeholder="Kurs başlığını girin" required />
                                <div class="invalid-feedback"></div>
                            </div>

                            <div class="form-group">
                                <label for="description">Açıklama</label>
                                <textarea class="form-control" id="description" rows="3" placeholder="Kurs açıklamasını girin" required></textarea>
                                <div class="invalid-feedback"></div>
                            </div>

                            <div class="form-group">
                                <label for="content">İçerik</label>
                                <textarea class="form-control" id="content" rows="10" placeholder="Kurs içeriğini girin"></textarea>
                                <div class="invalid-feedback"></div>
                            </div>

                            <div class="form-group">
                                <label for="categoryIds">Kategoriler</label>
                                <select class="form-control" id="categoryIds" multiple="multiple" required>
                                </select>
                                <div class="invalid-feedback"></div>
                            </div>

                            <div class="form-group mb-3">
                                <label for="photoFile">Kurs Fotoğrafı</label>
                                <input type="file" class="form-control" id="photoFile" accept="image/*" />
                                <small class="form-text text-muted" id="currentPhotoInfo" style="display:none;">Mevcut fotoğraf: <span id="currentPhotoName"></span></small>
                                <img id="currentPhotoPreview" src="" alt="Mevcut Fotoğraf" style="max-width: 150px; height: auto; margin-top: 10px; display:none;">
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                        <div class="card-footer">
                            <button type="submit" class="btn btn-primary">Kaydet</button>
                            <a href="/Admin/List" class="btn btn-secondary">Geri Dön</a>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</section>

@section Scripts {
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script>
        // Notyf global olarak _layoutAdminLTE.cshtml'de başlatıldığı için burada tekrar tanımlanmıyor.

        $(document).ready(function () {
            var apiBaseUrl = "@ViewBag.ApiBaseUrl";
            var token = localStorage.getItem("token");
            var courseId = $('#courseId').val();
            var currentCoursePhotoFileName = ''; // Mevcut fotoğrafın dosya adını tutacak değişken

            if (!token) {
                notyf.error("Giriş yapmanız gerekiyor.");
                location.href = "/Home/Login";
                return;
            }

            function displayValidationErrors(errors) {
                var summary = $('#validationSummary');
                summary.empty().show();
                if (Array.isArray(errors)) {
                    $.each(errors, function (i, error) {
                        summary.append('<p>' + error + '</p>');
                    });
                } else if (typeof errors === 'string') {
                    summary.append('<p>' + errors + '</p>');
                } else {
                    summary.append('<p>Formda hata(lar) var. Lütfen kontrol edin.</p>');
                }
                summary.addClass('alert-danger');
            }

            function clearValidationErrors() {
                $('#validationSummary').empty().hide().removeClass('alert-danger');
                $('.form-control').removeClass('is-invalid');
                $('.invalid-feedback').text('');
            }

            function showFieldValidationError(fieldId, message) {
                var input = $('#' + fieldId);
                input.addClass('is-invalid');
                input.next('.invalid-feedback').text(message).show();
            }

            function getCategories(selectedCategoryIds = []) { // Çoklu kategori ID'leri alacak şekilde parametre adı korundu
                $.ajax({
                    url: apiBaseUrl + '/categories', // API yolu düzeltildi (baseurl zaten /api içeriyorsa)
                    type: 'GET',
                    headers: { "Authorization": "Bearer " + token },
                    contentType: "application/json",
                    success: function (data) {
                        console.log("Kategoriler API'den alındı:", data); // Debugging için eklendi
                        var categorySelect = $("#categoryIds"); // ID korundu
                        categorySelect.empty();

                        if (Array.isArray(data)) { // Gelen verinin dizi olduğundan emin ol
                            $.each(data, function (i, item) {
                                var option = $('<option>', {
                                    value: item.id, // ID'yi value olarak ata
                                    text: item.name
                                });
                                // selectedCategoryIds bir dizi olduğu için includes kullanıldı
                                if (selectedCategoryIds.includes(item.id)) {
                                    option.prop('selected', true);
                                }
                                categorySelect.append(option);
                            });
                        } else {
                            console.warn("Kategori verisi dizi formatında değil:", data);
                            notyf.error("Kategori verisi beklenenden farklı formatta.");
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error("Kategoriler yüklenirken hata oluştu:", xhr.responseText);
                        notyf.error("Kategoriler yüklenirken bir sorun oluştu.");
                    }
                });
            }

            function fetchCourseDetails() {
                $.ajax({
                    url: apiBaseUrl + '/courses/' + courseId, // API yolu düzeltildi (baseurl zaten /api içeriyorsa)
                    type: 'GET',
                    headers: { "Authorization": "Bearer " + token },
                    success: function (data) {
                        $('#title').val(data.title);
                        $('#description').val(data.description);
                        $('#content').val(data.content);

                        // Mevcut fotoğraf dosya adını sakla
                        currentCoursePhotoFileName = data.photoUrl || '';

                        // API'den gelen kategori Id'lerini alıp getCategories'e gönder
                        var currentCategoryIds = data.categories ? data.categories.map(c => c.id) : [];
                        getCategories(currentCategoryIds);

                        if (data.photoUrl && data.photoUrl !== '-') {
                            $('#currentPhotoName').text(data.photoUrl);
                            // Mevcut fotoğraf yolu düzeltildi: /uploads/courses/ + dosya adı
                            $('#currentPhotoPreview').attr('src', '/uploads/courses/' + data.photoUrl).show();
                            $('#currentPhotoInfo').show();
                        } else {
                            $('#currentPhotoInfo').hide();
                            $('#currentPhotoPreview').hide();
                        }
                    },
                    error: function (xhr, status, error) {
                        var errorMessage = "Kurs detayları yüklenirken bir hata oluştu.";
                        if (xhr.status === 404) {
                            errorMessage = "Kurs bulunamadı.";
                        } else if (xhr.responseJSON && xhr.responseJSON.message) {
                            errorMessage = xhr.responseJSON.message;
                        } else if (xhr.responseText) {
                            errorMessage = xhr.responseText;
                        }
                        notyf.error(errorMessage);
                        console.error("Kurs detayı yükleme hatası:", xhr.responseText);
                        window.location.href = '/Admin/List';
                    }
                });
            }

            fetchCourseDetails(); // Sayfa yüklendiğinde kurs detaylarını getir

            $('#editCourseForm').on('submit', function (e) {
                e.preventDefault();
                clearValidationErrors();

                var title = $('#title').val().trim();
                var description = $('#description').val().trim();
                var content = $('#content').val().trim();
                var categoryIds = $('#categoryIds').val(); // Çoklu kategori seçimi için ID'ler dizisi alınır
                var photoFile = $('#photoFile')[0].files[0];

                let isValid = true;
                if (!title) { showFieldValidationError('title', 'Başlık zorunludur.'); isValid = false; }
                if (!description) { showFieldValidationError('description', 'Açıklama zorunludur.'); isValid = false; }

                // Çoklu kategori seçimi için kontrol: null veya boş dizi olmamalı
                if (!categoryIds || categoryIds.length === 0) { showFieldValidationError('categoryIds', 'En az bir kategori seçimi zorunludur.'); isValid = false; }

                if (!isValid) {
                    notyf.error("Lütfen tüm zorunlu alanları doldurun.");
                    return;
                }

                // Fotoğraf yükleme ve kurs güncelleme işlemini ayır
                if (photoFile) {
                    var photoFormData = new FormData();
                    photoFormData.append('photoFile', photoFile);

                    $.ajax({
                        url: '/Admin/UploadCoursePhoto', // C# metodu için belirtilen yol
                        type: 'POST',
                        data: photoFormData,
                        processData: false,
                        contentType: false,
                        success: function (uploadedFileName) {
                            // Fotoğraf yüklendikten sonra kursu güncelle
                            updateCourse(uploadedFileName);
                        },
                        error: function (xhr) {
                            notyf.error("Fotoğraf yüklenirken hata oluştu.");
                            console.error("Fotoğraf yükleme hatası:", xhr.responseText);
                        }
                    });
                } else {
                    // Yeni fotoğraf seçilmediyse, mevcut fotoğraf adını kullanarak kursu güncelle
                    updateCourse(currentCoursePhotoFileName);
                }

                function updateCourse(photoFileName) {
                    var payload = {
                        title: title,
                        description: description,
                        content: content,
                        photoUrl: photoFileName || null, // Yeni dosya adı veya mevcut dosya adı
                        categoryIds: categoryIds.map(Number) // ID'leri sayı dizisine çevir
                    };

                    $.ajax({
                        url: apiBaseUrl + '/courses/' + courseId, // API yolu düzeltildi (baseurl zaten /api içeriyorsa)
                        type: 'PUT',
                        headers: {
                            "Authorization": "Bearer " + token,
                            "Content-Type": "application/json" // JSON gönderildiği için Content-Type belirtilmeli
                        },
                        data: JSON.stringify(payload), // JSON olarak gönder
                        success: function (response) {
                            notyf.success("Kurs başarıyla güncellendi!");
                            window.location.href = '/Admin/List';
                        },
                        error: function (xhr, status, error) {
                            var errorMessage = "Kurs güncellenirken bir hata oluştu.";
                            if (xhr.responseJSON) {
                                if (xhr.responseJSON.message) {
                                    errorMessage = xhr.responseJSON.message;
                                }
                                if (xhr.responseJSON.errors) {
                                    // Hata mesajlarını ilgili alanlara göster
                                    if (xhr.responseJSON.errors.CategoryIds) { // Çoklu kategori ID'leri için hata kontrolü
                                        showFieldValidationError('categoryIds', xhr.responseJSON.errors.CategoryIds.join(', '));
                                    }
                                    $.each(xhr.responseJSON.errors, function (field, messages) {
                                        if (field.toLowerCase() !== 'categoryids') { // categoryIds zaten işlendi
                                            showFieldValidationError(field.toLowerCase(), messages.join(', '));
                                        }
                                    });
                                    displayValidationErrors("Formda hata(lar) var. Lütfen kontrol edin.");
                                }
                            } else if (xhr.responseText) {
                                errorMessage = xhr.responseText;
                            }
                            notyf.error(errorMessage);
                            console.error("Kurs güncelleme hatası:", xhr.responseText);
                        }
                    });
                }
            });
        });
    </script>
}
