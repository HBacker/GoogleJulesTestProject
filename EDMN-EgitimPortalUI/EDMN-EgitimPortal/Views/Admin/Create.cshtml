@{
    ViewData["Title"] = "Yeni Kurs Oluştur";
    Layout = "_layoutAdminLTE";
}

<div class="content-header" style="margin-left: 270px">
    <div class="container-fluid">
        <div class="row mb-2">
            <div class="col-sm-6">
                <h1 class="m-0">Yeni Kurs Oluştur</h1>
            </div>
        </div>
    </div>
</div>

<section class="content" style="margin-left: 270px">
    <div class="container-fluid">
        <div class="row justify-content-center">
            <div class="col-md-8">
                <div class="card card-primary">
                    <div class="card-header">
                        <h3 class="card-title">Kurs Bilgileri</h3>
                    </div>
                    <form id="createCourseForm" enctype="multipart/form-data">
                        <div class="card-body">
                            <div id="validationSummary" class="alert alert-danger" style="display:none;"></div>

                            <div class="form-group">
                                <label for="title">Başlık</label>
                                <input type="text" class="form-control" id="title" name="title" placeholder="Kurs başlığını girin" required />
                                <div class="invalid-feedback"></div>
                            </div>

                            <div class="form-group">
                                <label for="description">Açıklama</label>
                                <textarea class="form-control" id="description" name="description" rows="3" placeholder="Kurs açıklamasını girin" required></textarea>
                                <div class="invalid-feedback"></div>
                            </div>

                            <div class="form-group">
                                <label for="content">İçerik</label>
                                <textarea class="form-control" id="content" name="content" rows="10" placeholder="Kurs içeriğini girin"></textarea>
                                <div class="invalid-feedback"></div>
                            </div>

                            <div class="form-group">
                                <label for="categoryIds">Kategoriler</label>
                                <select class="form-control" id="categoryIds" name="categoryIds" multiple="multiple" required>
                                </select>
                                <div class="invalid-feedback"></div>
                            </div>

                            <div class="form-group mb-3">
                                <label for="photoFile">Kurs Fotoğrafı</label>
                                <input type="file" class="form-control" id="photoFile" name="photoFile" accept="image/*" />
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                        <div class="card-footer">
                            <button type="submit" class="btn btn-primary">Oluştur</button>
                            <a href="/Admin/List" class="btn btn-secondary">Geri Dön</a>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</section>

@section Scripts {
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script>
        $(document).ready(function () {
            const apiBaseUrl = "@ViewBag.ApiBaseUrl";
            const token = localStorage.getItem("token");

            if (!token) {
                notyf.error("Giriş yapmanız gerekiyor.");
                window.location.href = "/Home/Login";
                return;
            }

            function clearValidationErrors() {
                $('#validationSummary').empty().hide().removeClass('alert-danger');
                $('.form-control').removeClass('is-invalid');
                $('.invalid-feedback').text('');
            }

            function showFieldValidationError(fieldId, message) {
                const input = $('#' + fieldId);
                input.addClass('is-invalid');
                input.next('.invalid-feedback').text(message).show();
            }

            function displayValidationErrors(errors) {
                const summary = $('#validationSummary');
                summary.empty().show().addClass('alert-danger');
                if (Array.isArray(errors)) {
                    errors.forEach(error => {
                        summary.append('<p>' + error + '</p>');
                    });
                } else if (typeof errors === 'string') {
                    summary.append('<p>' + errors + '</p>');
                } else {
                    summary.append('<p>Formda hata(lar) var. Lütfen kontrol edin.</p>');
                }
            }

            function getCategories() {
                $.ajax({
                    url: apiBaseUrl + '/categories', 
                    type: 'GET',
                    headers: { "Authorization": "Bearer " + token },
                    contentType: "application/json",
                    success: function (data) {
                        console.log("Kategoriler API'den alındı:", data); 
                        const categorySelect = $("#categoryIds");
                        categorySelect.empty();

                        if (Array.isArray(data)) {
                            $.each(data, function (i, item) {
                                categorySelect.append($('<option>', {
                                    value: item.id,
                                    text: item.name
                                }));
                            });
                        } else {
                            console.warn("Kategori verisi dizi formatında değil:", data);
                            notyf.error("Kategori verisi beklenenden farklı formatta.");
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error("Kategoriler yüklenirken hata oluştu:", xhr.responseText);
                        notyf.error("Kategoriler yüklenirken bir sorun oluştu.");
                    }
                });
            }

            getCategories();

            $('#createCourseForm').on('submit', function (e) {
                e.preventDefault();
                clearValidationErrors();

                const title = $('#title').val().trim();
                const description = $('#description').val().trim();
                const content = $('#content').val().trim();
                const categoryIds = $('#categoryIds').val(); // Multiple select, returns array of IDs
                const photoFile = $('#photoFile')[0].files[0];

                let isValid = true;
                if (!title) { showFieldValidationError('title', 'Başlık zorunludur.'); isValid = false; }
                if (!description) { showFieldValidationError('description', 'Açıklama zorunludur.'); isValid = false; }
                if (!categoryIds || categoryIds.length === 0) { showFieldValidationError('categoryIds', 'En az bir kategori seçimi zorunludur.'); isValid = false; }

                if (!isValid) {
                    notyf.error("Lütfen tüm zorunlu alanları doldurun.");
                    return;
                }

                if (photoFile) {
                    const photoFormData = new FormData();
                    photoFormData.append('photoFile', photoFile);

                    $.ajax({
                        url: '/Admin/UploadCoursePhoto', 
                        type: 'POST',
                        data: photoFormData,
                        processData: false,
                        contentType: false,
                        success: function (filename) {
                            createCourse(filename);
                        },
                        error: function (xhr) {
                            notyf.error("Fotoğraf yüklenirken hata oluştu.");
                            console.error("Fotoğraf yükleme hatası:", xhr.responseText);
                        }
                    });
                } else {
                    createCourse(null); 
                }

                function createCourse(photoFileName) {
                    const courseData = {
                        title: title, 
                        description: description, 
                        content: content, 
                        photoUrl: photoFileName || null,
                        categoryIds: categoryIds.map(id => parseInt(id, 10)) 
                    };

                    $.ajax({
                        url: apiBaseUrl + '/courses', 
                        type: 'POST',
                        headers: {
                            "Authorization": "Bearer " + token, 
                            "Content-Type": "application/json" 
                        },
                        data: JSON.stringify(courseData), 
                        success: function (response) {
                            notyf.success("Kurs başarıyla oluşturuldu!");
                            window.location.href = '/Admin/List';
                        },
                        error: function (xhr, status, error) {
                            var errorMessage = "Kurs oluşturulurken hata oluştu.";
                            if (xhr.responseJSON) { 
                                if (xhr.responseJSON.message) {
                                    errorMessage = xhr.responseJSON.message;
                                }
                                if (xhr.responseJSON.errors) {
                                    let errorsDisplayed = false;
                                    for (const field in xhr.responseJSON.errors) {
                                        let fieldId = field.toLowerCase();
                                        if (field.toLowerCase() === 'categoryids') fieldId = 'categoryIds'; 
                                        
                                        showFieldValidationError(fieldId, xhr.responseJSON.errors[field].join(', '));
                                        errorsDisplayed = true;
                                    }
                                    if (errorsDisplayed) { 
                                       displayValidationErrors("Lütfen formdaki hataları düzeltin."); 
                                    } else if (!xhr.responseJSON.message) { 
                                       displayValidationErrors(errorMessage); 
                                    }
                                } else if (xhr.responseJSON.message) {
                                     displayValidationErrors(errorMessage); 
                                }
                            } else if (xhr.responseText) {
                                try {
                                    const parsedError = JSON.parse(xhr.responseText);
                                    if (parsedError && parsedError.message) {
                                        errorMessage = parsedError.message;
                                    }
                                } catch(e) {  }
                                displayValidationErrors(errorMessage); 
                            } else {
                                displayValidationErrors(errorMessage); 
                            }
                            notyf.error(errorMessage); 
                            console.error("Kurs oluşturma hatası:", xhr.responseText);
                        }
                    });
                }
            });
        });
    </script>
}
