@{
    ViewData["Title"] = "Kullanıcı Tipi Yönetimi";
    Layout = "_layoutAdminLTE";
}

<div class="content-header" style="margin-left:270px">
    <div class="container-fluid">
        <div class="row mb-2">
            <div class="col-sm-6">
                <h1 class="m-0">@ViewData["Title"]</h1>
            </div>
        </div>
    </div>
</div>

<section class="content" style="margin-left:270px">
    <div class="container-fluid">
        <div class="row justify-content-center">
            <div class="col-md-8">
                <div class="card card-primary">
                    <div class="card-header">
                        <h3 class="card-title">Kullanıcı Tipi (<span id="userName">Yükleniyor...</span>)</h3>
                    </div>
                    <div class="card-body">
                        <div id="validationSummary" class="alert alert-danger" style="display:none;"></div>
                        <input type="hidden" id="userId" value="@ViewBag.UserId" />

                        <div class="form-group">
                            <label>Mevcut Kullanıcı Tipi</label>
                            <div id="currentUserTypeDisplay" class="mb-3">
                            </div>
                        </div>

                        <div class="form-group">
                            <label for="selectUserType">Kullanıcı Tipi Ata</label>
                            <select class="form-control" id="selectUserType">
                            </select>
                        </div>
                    </div>
                    <div class="card-footer">
                        <button type="button" class="btn btn-primary" id="updateUserTypeBtn">
                            <i class="fas fa-save me-2"></i> Kullanıcı Tipini Güncelle
                        </button>
                        <a href="/Admin/GetUserList" class="btn btn-secondary">
                            <i class="fas fa-arrow-left"></i> Geri Dön
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

@section Scripts {
    <script>
        $(document).ready(function () {
            var apiBaseUrl = "@ViewBag.ApiBaseUrl";
            var token = localStorage.getItem("token");
            var userId = "@ViewBag.UserId";
            const availableUserTypes = ["Admin", "Educator", "Student"];

            if (!token) {
                notyf.error("Giriş yapmanız gerekiyor.");
                location.href = "/Home/Login";
                return;
            }

            if (!userId) {
                notyf.error("Kullanıcı ID'si bulunamadı.");
                window.location.href = '/Admin/GetUserList';
                return;
            }

            function displayValidationErrors(errors) {
                var summary = $('#validationSummary');
                summary.empty().show();
                if (Array.isArray(errors)) {
                    $.each(errors, function (i, error) {
                        summary.append($('<p></p>').text(error));
                    });
                } else if (typeof errors === 'string') {
                    summary.append($('<p></p>').text(errors));
                } else {
                    summary.append($('<p></p>').text('Formda hata(lar) var. Lütfen kontrol edin.'));
                }
                summary.addClass('alert-danger');
            }

            function clearValidationErrors() {
                $('#validationSummary').empty().hide().removeClass('alert-danger');
            }
            
            function populateUserTypeDropdown(currentUserType) {
                var userTypeSelect = $('#selectUserType');
                userTypeSelect.empty();
                availableUserTypes.forEach(function(type) {
                    var option = $('<option>', {
                        value: type,
                        text: type
                    });
                    if (currentUserType === type) {
                        option.prop('selected', true);
                    }
                    userTypeSelect.append(option);
                });
            }

            function fetchUserDetails() {
                $.ajax({
                    url: apiBaseUrl + '/user/' + userId, 
                    type: 'GET',
                    headers: { "Authorization": "Bearer " + token },
                    success: function (data) {
                        $('#userName').text(data.username || data.email || 'Kullanıcı');
                        var currentUserTypeDisplay = $('#currentUserTypeDisplay');
                        currentUserTypeDisplay.empty();
                        if (data.userType) {
                            currentUserTypeDisplay.append(`<span class="badge badge-info">${data.userType}</span>`);
                        } else {
                            currentUserTypeDisplay.append('<span class="text-muted">Bu kullanıcının tipi atanmamış.</span>');
                        }
                        populateUserTypeDropdown(data.userType);
                    },
                    error: function (xhr, status, error) {
                        var errorMessage = "Kullanıcı detayları yüklenirken bir hata oluştu.";
                        if (xhr.status === 404) {
                            errorMessage = "Kullanıcı bulunamadı.";
                        } else if (xhr.responseJSON && xhr.responseJSON.message) {
                            errorMessage = xhr.responseJSON.message;
                        } else if (xhr.responseText) {
                            errorMessage = xhr.responseText;
                        }
                        notyf.error(errorMessage);
                        window.location.href = '/Admin/GetUserList';
                    }
                });
            }

            fetchUserDetails(); 

            $('#updateUserTypeBtn').on('click', function () {
                clearValidationErrors();
                var selectedUserType = $('#selectUserType').val(); 

                if (!selectedUserType) {
                     notyf.error("Lütfen bir kullanıcı tipi seçin.");
                    return;
                }

                var updateData = {
                    userId: userId,
                    newUserRole: selectedUserType 
                };

                $.ajax({
                    url: apiBaseUrl + '/user/update-role', 
                    type: 'PUT',
                    headers: {
                        "Authorization": "Bearer " + token,
                        "Content-Type": "application/json"
                    },
                    data: JSON.stringify(updateData),
                    success: function (response) {
                        notyf.success("Kullanıcı tipi başarıyla güncellendi!");
                        fetchUserDetails();
                    },
                    error: function (xhr, status, error) {
                        var errorMessage = "Kullanıcı tipi güncellenirken bir hata oluştu.";
                        if (xhr.responseJSON) {
                            if (xhr.responseJSON.message) {
                                errorMessage = xhr.responseJSON.message;
                            }
                             if (xhr.responseJSON.errors) {
                                displayValidationErrors(Object.values(xhr.responseJSON.errors).flat());
                            }
                        } else if (xhr.responseText) {
                            errorMessage = xhr.responseText;
                        }
                        notyf.error(errorMessage);
                    }
                });
            });
        });
    </script>
}
