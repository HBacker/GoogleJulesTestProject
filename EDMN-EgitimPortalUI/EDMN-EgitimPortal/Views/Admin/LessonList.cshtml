@{
    ViewData["Title"] = "Ders Listesi";
    Layout = "_layoutAdminLTE";
}

<div class="content-header" style="margin-left:270px">
    <div class="container-fluid">
        <div class="row mb-2">
            <div class="col-sm-6">
                <h1 class="m-0">Ders Listesi</h1>
            </div>
            <div class="col-sm-6 text-right">
                <a href="/Admin/CreateLesson" class="btn btn-dark">
                    <i class="fas fa-plus me-2"></i> Yeni Ders Ekle
                </a>
            </div>
        </div>
    </div>
</div>

<section class="content" style="margin-left:270px">
    <div class="container-fluid">
        <div class="card">
            <div class="card-header bg-light">
                <h3 class="card-title">Dersler</h3>
                <div class="card-tools">
                    <select id="courseFilter" class="form-control form-control-sm">
                        <option value="">Tüm Kurslar</option>
                    </select>
                </div>
            </div>
            <div class="card-body">
                <div id="lessonsTableContainer" class="table-responsive">
                    <div class="alert alert-info" id="noLessonsMessage" style="display:none;">
                        Henüz ders bulunmamaktadır.
                    </div>
                    <table class="table table-striped table-hover" id="lessonsTable">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Sıra No</th>
                                <th>Ders Adı</th>
                                <th>Kurs</th>
                                <th>Video</th>
                                <th>Thumbnail</th>
                                <th style="width: 150px;">İşlemler</th>
                            </tr>
                        </thead>
                        <tbody id="lessonsTableBody">
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</section>

<div class="modal fade" id="videoPreviewModal" tabindex="-1" aria-labelledby="videoPreviewModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="videoPreviewModalLabel">Video Önizleme: <span id="videoTitle"></span></h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <video id="previewVideo" controls style="max-width: 100%; height: auto;">
                    Tarayıcınız video etiketini desteklemiyor.
                </video>
            </div>
        </div>
    </div>
</div>

<style>
    .table th, .table td {
        vertical-align: middle;
    }

    .btn-group {
        gap: 5px;
    }

    .img-thumbnail {
        object-fit: cover;
    }

    #previewVideo {
        width: 100%;
        max-width: 500px; /* Adjust as needed */
        max-height: 500px; /* Adjust as needed */
        margin: auto;
    }

    .modal-dialog {
        max-width: 800px; /* Adjust as needed */
    }
</style>

@section Scripts {
    <script>
        $(document).ready(function () {
            var apiBaseUrl = "@ViewBag.ApiBaseUrl";
            var token = localStorage.getItem("token");
            var initialCourseId = "@ViewBag.CourseId"; // Passed from controller if filtering

            if (!token) {
                notyf.error("Giriş yapmanız gerekiyor.");
                location.href = "/Home/Login";
                return;
            }

            window.showVideoPreview = function (videoUrl, videoName) {
                const video = document.getElementById('previewVideo');
                const titleSpan = document.getElementById('videoTitle');
                video.src = videoUrl;
                titleSpan.textContent = videoName;
                const modal = new bootstrap.Modal(document.getElementById('videoPreviewModal'));
                modal.show();
            };

            document.getElementById('videoPreviewModal').addEventListener('hidden.bs.modal', function () {
                const video = document.getElementById('previewVideo');
                video.pause();
                video.src = '';
            });

            function fetchCoursesForFilter() {
                $.ajax({
                    url: apiBaseUrl + '/courses',
                    type: 'GET',
                    headers: { "Authorization": "Bearer " + token },
                    success: function (data) {
                        var courseFilterSelect = $('#courseFilter');
                        courseFilterSelect.empty();
                        courseFilterSelect.append($('<option>', { value: '', text: 'Tüm Kurslar' }));
                        $.each(data, function (i, item) {
                            courseFilterSelect.append($('<option>', {
                                value: item.id,
                                text: item.title
                            }));
                        });
                        if (initialCourseId) {
                            courseFilterSelect.val(initialCourseId);
                        }
                        fetchLessons(initialCourseId);
                    },
                    error: function (xhr, status, error) {
                        notyf.error("Kurslar yüklenirken bir sorun oluştu.");
                        console.error("Kurs yükleme hatası:", xhr.responseText);
                    }
                });
            }

            function fetchLessons(courseId = null) {
                let url = apiBaseUrl + '/lessons';
                if (courseId) {
                    url += '?courseId=' + courseId; // Assuming API supports filtering by courseId
                }

                $.ajax({
                    url: url,
                    type: 'GET',
                    headers: { "Authorization": "Bearer " + token },
                    success: function (data) {
                        var lessonsTableBody = $('#lessonsTableBody');
                        lessonsTableBody.empty();

                        if (data && data.length > 0) {
                            $('#noLessonsMessage').hide();
                            $('#lessonsTable').show();
                            $.each(data, function (i, item) {
                                var videoPreviewBtn = item.videoUrl ?
                                    `<button type="button" class="btn btn-sm btn-info" onclick="showVideoPreview('/videos/${item.videoUrl}', '${item.title}')">
                                                <i class="fas fa-play"></i> Önizle
                                            </button>` :
                                    `<span class="text-muted">Video yok</span>`;

                                var thumbnailImg = item.thumbnailUrl ?
                                    `<img src="/thumbnails/${item.thumbnailUrl}" alt="Thumbnail" style="height: 30px; width: auto;" class="img-thumbnail" />` :
                                    `<span class="text-muted">Thumbnail yok</span>`;

                                var row = `
                                            <tr>
                                                <td>${item.id}</td>
                                                <td>${item.orderNo}</td>
                                                <td>${item.title}</td>
                                                <td>${item.courseTitle || 'Bilinmiyor'}</td> <td>${videoPreviewBtn}</td>
                                                <td>${thumbnailImg}</td>
                                                <td>
                                                    <div class="btn-group">
                                                        <a href="/Admin/EditLesson?courseId=${item.courseId}" class="btn btn-sm btn-primary" title="Dersleri Düzenle">
                                                            <i class="fas fa-edit"></i>
                                                        </a>
                                                        <button type="button" class="btn btn-sm btn-danger delete-lesson-btn" data-id="${item.id}" title="Dersi Sil">
                                                            <i class="fas fa-trash"></i>
                                                        </button>
                                                    </div>
                                                </td>
                                            </tr>
                                        `;
                                lessonsTableBody.append(row);
                            });
                        } else {
                            $('#lessonsTable').hide();
                            $('#noLessonsMessage').show();
                        }
                    },
                    error: function (xhr, status, error) {
                        notyf.error("Dersler yüklenirken bir sorun oluştu.");
                        console.error("Ders yükleme hatası:", xhr.responseText);
                        $('#lessonsTable').hide();
                        $('#noLessonsMessage').show();
                    }
                });
            }

            fetchCoursesForFilter();

            $('#courseFilter').on('change', function () {
                var selectedCourseId = $(this).val();
                fetchLessons(selectedCourseId);
            });

            $(document).on('click', '.delete-lesson-btn', function () {
                var lessonId = $(this).data('id');
                Swal.fire({
                    title: 'Emin misiniz?',
                    text: "Bu dersi silmek istediğinizden emin misiniz? Bu işlem geri alınamaz!",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Evet, Sil!',
                    cancelButtonText: 'İptal'
                }).then((result) => {
                    if (result.isConfirmed) {
                        $.ajax({
                            url: apiBaseUrl + '/lessons/' + lessonId,
                            type: 'DELETE',
                            headers: { "Authorization": "Bearer " + token },
                            success: function (response) {
                                notyf.success("Ders başarıyla silindi.");
                                fetchLessons($('#courseFilter').val());
                            },
                            error: function (xhr, status, error) {
                                var errorMessage = "Ders silinirken bir hata oluştu.";
                                if (xhr.responseJSON && xhr.responseJSON.message) {
                                    errorMessage = xhr.responseJSON.message;
                                } else if (xhr.responseText) {
                                    errorMessage = xhr.responseText;
                                }
                                notyf.error(errorMessage);
                                console.error("Ders silme hatası:", xhr.responseText);
                            }
                        });
                    }
                });
            });
        });
    </script>
}
